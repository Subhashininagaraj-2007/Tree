class Solution {
      static int minTime;
    public static int minTime(Node root, int target) {
        minTime = 0;
        int[] ans = {0};           
        findTarNode(root, target, ans);
        return ans[0];
    }
    static int findDepth(Node root) {
        if (root == null) return 0;
        return 1 + Math.max(findDepth(root.left), findDepth(root.right));
    }
    static int findTarNode(Node root, int target, int[] ans) {
        if (root == null) return -1;

        if (root.data == target) {
            int depth = findDepth(root) - 1;
            ans[0] = Math.max(ans[0], depth);
            return 1;
        }

        int left = findTarNode(root.left, target, ans);
        if (left != -1) {
            int depthRight = findDepth(root.right);
            ans[0] = Math.max(ans[0], left + depthRight);
            return left + 1;
        }

        int right = findTarNode(root.right, target, ans);
        if (right != -1) {
            int depthLeft = findDepth(root.left);
            ans[0] = Math.max(ans[0], right + depthLeft);
            return right + 1;
        }

        return -1;
    }
}
