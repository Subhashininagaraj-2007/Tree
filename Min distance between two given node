class GfG {
    int findDist(Node root, int a, int b) {
       Node lca = lowestCommonAncestor(root, a, b);
        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);
        return d1 + d2;
    }
    private Node lowestCommonAncestor(Node root, int a, int b) {
        if (root == null || root.data == a || root.data == b) {
            return root;
        }
        Node left = lowestCommonAncestor(root.left, a, b);
        Node right = lowestCommonAncestor(root.right, a, b);
        if (left != null && right != null) return root;
        return (left != null) ? left : right;
    }
    private int findLevel(Node root, int target, int level) {
        if (root == null) return -1;
        if (root.data == target) return level;
        int left = findLevel(root.left, target, level + 1);
        if (left != -1) return left;
        return findLevel(root.right, target, level + 1);
    }
}
