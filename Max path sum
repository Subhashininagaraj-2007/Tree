class Solution {
   int result;
    Node rootNode;

    int maxPathSum(Node root) {
        result = Integer.MIN_VALUE;
        rootNode = root;
        dfs(root);
        return result;
    }

    private int dfs(Node node) {
        if (node == null) return Integer.MIN_VALUE;
        if (node.left == null && node.right == null) {
            return node.data;
        }
        int left = dfs(node.left);
        int right = dfs(node.right);
        if (node.left != null && node.right != null) {
            if (left != Integer.MIN_VALUE && right != Integer.MIN_VALUE) {
                result = Math.max(result, left + node.data + right);
            }
            int best = Math.max(left, right);
            return (best == Integer.MIN_VALUE) ? Integer.MIN_VALUE : node.data + best;
        }
        int childMax = Math.max(left, right);
        boolean isRootSpecial = (node == rootNode) && ((node.left == null) ^ (node.right == null));
        if (isRootSpecial && childMax != Integer.MIN_VALUE) {
            result = Math.max(result, node.data + childMax);
        }
        if (childMax == Integer.MIN_VALUE) return Integer.MIN_VALUE;
        return node.data + childMax;
    }
}
